import os
import logging
import sqlite3
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# üîê –ö–ª—é—á–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
TWELVE_DATA_KEY = os.getenv("API_KEY")
ALPHA_VANTAGE_KEY = os.getenv("ALPHA_VANTAGE_KEY")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect("signals.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS signals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            pair TEXT,
            timeframe TEXT,
            signal_type TEXT,
            signal TEXT,
            timestamp TEXT
        )
    """)
    conn.commit()
    conn.close()

# üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç Twelve Data
def get_basic_signal(pair: str, interval: str):
    try:
        url = f"https://api.twelvedata.com/time_series?symbol={pair}&interval={interval}&apikey={TWELVE_DATA_KEY}"
        response = requests.get(url)
        data = response.json()

        if "values" not in data:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {data.get('message', '–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã')}")

        last_close = float(data["values"][0]["close"])
        prev_close = float(data["values"][1]["close"])
        signal = "BUY" if last_close > prev_close else "SELL"
        return signal
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç Alpha Vantage
def get_smart_signal(pair: str, interval: str):
    try:
        url = f"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol={pair}&interval={interval}&apikey={ALPHA_VANTAGE_KEY}&datatype=json"
        response = requests.get(url)
        data = response.json()

        # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á "Time Series (1min)" –∏–ª–∏ –¥—Ä—É–≥–æ–π
        time_series_key = next((k for k in data if "Time Series" in k), None)
        if not time_series_key:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {data.get('Note') or data.get('Error Message') or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")

        time_series = data[time_series_key]
        values = list(time_series.values())
        last_close = float(values[0]['4. close'])
        prev_close = float(values[1]['4. close'])
        signal = "BUY" if last_close > prev_close else "SELL"
        return signal
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì° –°–∏–≥–Ω–∞–ª", callback_data="basic")],
        [InlineKeyboardButton("üìä –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª (RSI+MACD)", callback_data="smart")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

# üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
async def handle_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    pair = "EUR/USD"
    interval = "1min"

    if query.data == "basic":
        signal = get_basic_signal(pair, interval)
        text = f"üì° –°–∏–≥–Ω–∞–ª {pair} M1\nüü¢ {signal}\n‚è≥ –í—Ä–µ–º—è: 1‚Äì3 –º–∏–Ω"
        signal_type = "basic"
    else:
        signal = get_smart_signal(pair, interval)
        text = f"üìä –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª (RSI+MACD)\n{signal}\n‚è≥ –í—Ä–µ–º—è: 1‚Äì3 –º–∏–Ω"
        signal_type = "smart"

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –ë–î
    conn = sqlite3.connect("signals.db")
    c = conn.cursor()
    c.execute("""
        INSERT INTO signals (pair, timeframe, signal_type, signal, timestamp)
        VALUES (?, ?, ?, ?, ?)
    """, (pair, interval, signal_type, signal, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    conn.close()

    await query.edit_message_text(text)

# üö¶ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_signal))
    app.run_polling()

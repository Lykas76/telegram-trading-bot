import os
import logging
import sqlite3
from datetime import datetime, timezone
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# üîê –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ Railway/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
TWELVE_DATA_KEY = os.getenv("API_KEY")  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
ALPHA_VANTAGE_KEY = os.getenv("ALPHA_VANTAGE_KEY")  # –î–ª—è —É–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (RSI + MACD)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("signals.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS signals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            pair TEXT,
            timeframe TEXT,
            signal_type TEXT,
            signal TEXT,
            timestamp TEXT
        )
    """)
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (Twelve Data)
def get_basic_signal(pair: str, interval: str):
    try:
        symbol = pair.replace("/", "")
        url = f"https://api.twelvedata.com/time_series?symbol={symbol}&interval={interval}&apikey={TWELVE_DATA_KEY}"
        response = requests.get(url)
        data = response.json()
        if "values" not in data:
            raise ValueError("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–∞)
        last_close = float(data["values"][0]["close"])
        prev_close = float(data["values"][1]["close"])
        signal = "BUY" if last_close > prev_close else "SELL"
        return signal
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (Alpha Vantage)
def get_smart_signal(pair: str, interval: str):
    try:
        symbol = pair.replace("/", "")
        url = f"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol={symbol}&interval={interval}&apikey={ALPHA_VANTAGE_KEY}&datatype=json"
        response = requests.get(url)
        data = response.json()
        if "Time Series" not in str(data):
            raise ValueError("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π RSI+MACD –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å (—É–ø—Ä–æ—â—ë–Ω)
        return "BUY"  # –ó–∞–≥–ª—É—à–∫–∞
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üì° –°–∏–≥–Ω–∞–ª", callback_data="basic")],
                [InlineKeyboardButton("üìä –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª (RSI+MACD)", callback_data="smart")]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    pair = "EUR/USD"
    interval = "1min"  # M1
    if query.data == "basic":
        signal = get_basic_signal(pair, interval)
        text = f"üì° –°–∏–≥–Ω–∞–ª {pair} M1\nüü¢ {signal}\n‚è≥ –í—Ä–µ–º—è: 1‚Äì3 –º–∏–Ω"
    else:
        signal = get_smart_signal(pair, interval)
        text = f"üìä –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª (RSI+MACD)\n{signal}\n‚è≥ –í—Ä–µ–º—è: 1‚Äì3 –º–∏–Ω"
    await query.edit_message_text(text)

if __name__ == "__main__":
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_signal))
    app.run_polling()

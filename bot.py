import os
import requests
import sqlite3
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
API_KEY = "8aefd7f6d24d4e99ba317872ce59e00c"

PAIRS = ["EUR/USD", "GBP/USD", "AUD/JPY", "EUR/CAD"]
TIMEFRAMES = ["M1", "M5", "M15"]

# üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("signals.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS smart_signals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        pair TEXT,
        timeframe TEXT,
        signal TEXT,
        rsi REAL,
        macd REAL,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
""")
conn.commit()
conn.close()


# üì° –û–±—ã—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–ø–æ —Ü–µ–Ω–µ)
def get_signal(pair: str, timeframe: str) -> str:
    symbol_map = {
        "EUR/USD": "EUR/USD",
        "GBP/USD": "GBP/USD",
        "AUD/JPY": "AUD/JPY",
        "EUR/CAD": "EUR/CAD"
    }

    tf_map = {
        "M1": "1min",
        "M5": "5min",
        "M15": "15min"
    }

    symbol = symbol_map[pair]
    interval = tf_map[timeframe]

    url = f"https://api.twelvedata.com/time_series?symbol={symbol}&interval={interval}&apikey={API_KEY}&outputsize=2"

    try:
        response = requests.get(url)
        data = response.json()

        if "values" not in data:
            raise Exception(data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))

        latest = data["values"][0]
        open_price = float(latest["open"])
        close_price = float(latest["close"])

        if close_price > open_price:
            return "üü¢ BUY (–≤–≤–µ—Ä—Ö)"
        elif close_price < open_price:
            return "üî¥ SELL (–≤–Ω–∏–∑)"
        else:
            return "‚ö™Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"


# üìä –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI –∏ MACD
def get_smart_signal(pair: str, timeframe: str) -> str:
    tf_map = {
        "M1": "1min",
        "M5": "5min",
        "M15": "15min"
    }
    symbol = pair
    interval = tf_map[timeframe]

    url_rsi = f"https://api.twelvedata.com/rsi?symbol={symbol}&interval={interval}&apikey={API_KEY}"
    url_macd = f"https://api.twelvedata.com/macd?symbol={symbol}&interval={interval}&apikey={API_KEY}"

    try:
        rsi_data = requests.get(url_rsi).json()
        macd_data = requests.get(url_macd).json()

        rsi = float(rsi_data["values"][0]["rsi"])
        macd = float(macd_data["values"][0]["macd"])

        # –ü—Ä–∞–≤–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
        if rsi < 30 and macd > 0:
            signal = "üü¢ BUY (–≤–≤–µ—Ä—Ö)"
        elif rsi > 70 and macd < 0:
            signal = "üî¥ SELL (–≤–Ω–∏–∑)"
        else:
            signal = "‚ö™Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –ë–î
        conn = sqlite3.connect("signals.db")
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO smart_signals (pair, timeframe, signal, rsi, macd) VALUES (?, ?, ?, ?, ?)",
            (pair, timeframe, signal, rsi, macd)
        )
        conn.commit()
        conn.close()

        return f"ü§ñ –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª {pair} {timeframe}\n{signal}\nüìä RSI: {rsi:.2f}, MACD: {macd:.4f}\n‚è≥ –í—Ä–µ–º—è: 1‚Äì3 –º–∏–Ω"
    except Exception as e:
        return f"ü§ñ –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª {pair} {timeframe}\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}\nüìä RSI: 0.0, MACD: 0.0000\n‚è≥ –í—Ä–µ–º—è: 1‚Äì3 –º–∏–Ω"


# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [[pair] for pair in PAIRS]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text in PAIRS:
        context.user_data["pair"] = text
        keyboard = [[tf] for tf in TIMEFRAMES]
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return

    if text in TIMEFRAMES:
        context.user_data["tf"] = text
        keyboard = [["üì° –°–∏–≥–Ω–∞–ª", "üîÑ –í–∞–ª—é—Ç–∞", "üìä –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª (RSI+MACD)"]]
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º: {text}",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return

    if text == "üì° –°–∏–≥–Ω–∞–ª":
        pair = context.user_data.get("pair")
        tf = context.user_data.get("tf")
        if pair and tf:
            signal = get_signal(pair, tf)
            await update.message.reply_text(f"üîî –°–∏–≥–Ω–∞–ª {pair} {tf}\n{signal}\n‚è≥ –í—Ä–µ–º—è: 1‚Äì3 –º–∏–Ω")
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º.")
        return

    if text == "üìä –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª (RSI+MACD)":
        pair = context.user_data.get("pair")
        tf = context.user_data.get("tf")
        if pair and tf:
            signal = get_smart_signal(pair, tf)
            await update.message.reply_text(signal)
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º.")
        return

    if text == "üîÑ –í–∞–ª—é—Ç–∞":
        context.user_data.pop("pair", None)
        context.user_data.pop("tf", None)
        keyboard = [[pair] for pair in PAIRS]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∑–∞–Ω–æ–≤–æ:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return

    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()


if __name__ == "__main__":
    main()

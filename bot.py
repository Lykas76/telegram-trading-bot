import os
import requests
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# üîë –¢–æ–∫–µ–Ω—ã
TOKEN = os.getenv("TOKEN")  # –¢–≤–æ–π Telegram Bot API
ALPHA_TOKEN = os.getenv("ALPHA_TOKEN")  # API Alpha Vantage

# üìä –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
PAIRS = {
    "EUR/USD": ("EUR", "USD"),
    "GBP/USD": ("GBP", "USD"),
    "AUD/JPY": ("AUD", "JPY"),
    "EUR/CAD": ("EUR", "CAD"),
}
TIMEFRAMES = {"M1": "1min", "M5": "5min", "M15": "15min"}


# üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å Alpha Vantage
def get_signal(pair: str, tf: str):
    base, quote = PAIRS[pair]
    interval = TIMEFRAMES[tf]

    url = (
        f"https://www.alphavantage.co/query?"
        f"function=FX_INTRADAY&from_symbol={base}&to_symbol={quote}"
        f"&interval={interval}&apikey={ALPHA_TOKEN}&outputsize=compact"
    )

    try:
        r = requests.get(url)
        data = r.json()

        key = f"Time Series FX ({interval})"
        if key not in data:
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "NONE", 2, 0

        candles = list(data[key].items())
        if len(candles) < 2:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", "NONE", 2, 0

        # –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Å–≤–µ—á–∏
        last_time, last_candle = candles[0]
        prev_time, prev_candle = candles[1]

        last_close = float(last_candle["4. close"])
        prev_close = float(prev_candle["4. close"])

        diff = abs(last_close - prev_close)  # —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
        pct_strength = min(100, round((diff / prev_close) * 100000))  # % —Å–∏–ª—ã (0‚Äì100)

        # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if last_close > prev_close:
            signal = "üü¢ BUY (–≤–≤–µ—Ä—Ö)"
            direction = "BUY"
        elif last_close < prev_close:
            signal = "üî¥ SELL (–≤–Ω–∏–∑)"
            direction = "SELL"
        else:
            signal = "‚ö™ –ù–ï–¢ –°–ò–ì–ù–ê–õ–ê"
            direction = "FLAT"

        # –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ –ø–æ —Å–∏–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è
        if diff < 0.0005:
            duration = 1
        elif diff < 0.0010:
            duration = 2
        elif diff < 0.0015:
            duration = 3
        elif diff < 0.0020:
            duration = 4
        else:
            duration = 5

        return signal, direction, duration, pct_strength

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}", "NONE", 2, 0


# ‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [[pair] for pair in PAIRS]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
    )


# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    if text in PAIRS:
        context.user_data["pair"] = text
        keyboard = [[tf for tf in TIMEFRAMES]]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
            reply_markup=ReplyKeyboardMarkup(keyboard + [["üîÑ –í–∞–ª—é—Ç–∞"]], resize_keyboard=True),
        )

    # –≤—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    elif text in TIMEFRAMES:
        context.user_data["tf"] = text
        await update.message.reply_text(
            "–ù–∞–∂–º–∏ üì° –°–∏–≥–Ω–∞–ª",
            reply_markup=ReplyKeyboardMarkup([["üì° –°–∏–≥–Ω–∞–ª", "üîÑ –í–∞–ª—é—Ç–∞"]], resize_keyboard=True),
        )

    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
    elif text == "üì° –°–∏–≥–Ω–∞–ª":
        pair = context.user_data.get("pair", "EUR/USD")
        tf = context.user_data.get("tf", "M5")

        signal_text, direction, duration, strength = get_signal(pair, tf)

        now = datetime.now()
        now_str = now.strftime("%H:%M:%S")
        end_time = (now + timedelta(minutes=duration)).strftime("%H:%M:%S")

        await update.message.reply_text(
            f"üîî –°–∏–≥–Ω–∞–ª {pair} {tf}\n"
            f"{signal_text}\n"
            f"‚è≥ –ó–∞–π—Ç–∏ –Ω–∞: {duration} –º–∏–Ω\n"
            f"üìä –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {strength}%\n"
            f"üïí –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞: {now_str}\n"
            f"‚èπ –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É –¥–æ: {end_time}"
        )

        await update.message.reply_text(
            "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É —Å–∏–≥–Ω–∞–ª—É:",
            reply_markup=ReplyKeyboardMarkup([["üì° –°–∏–≥–Ω–∞–ª", "üîÑ –í–∞–ª—é—Ç–∞"]], resize_keyboard=True),
        )

    # —Å–º–µ–Ω–∞ –≤–∞–ª—é—Ç—ã
    elif text == "üîÑ –í–∞–ª—é—Ç–∞":
        keyboard = [[pair] for pair in PAIRS]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º.")


# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

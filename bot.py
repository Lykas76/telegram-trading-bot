import os
import random
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# üîë –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–ª–∏ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–π)
TOKEN = os.getenv("TOKEN")

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
PAIRS = ["EUR/USD", "GBP/USD", "AUD/JPY", "EUR/CAD"]
TIMEFRAMES = ["M1", "M5", "M15"]


# üìå –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [[pair] for pair in PAIRS]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


# üìå –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # ‚úÖ –í—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    if text in PAIRS:
        context.user_data["pair"] = text
        keyboard = [[tf for tf in TIMEFRAMES]]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
            reply_markup=ReplyKeyboardMarkup(keyboard + [["üîÑ –í–∞–ª—é—Ç–∞"]], resize_keyboard=True)
        )

    # ‚úÖ –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    elif text in TIMEFRAMES:
        context.user_data["tf"] = text
        await update.message.reply_text(
            "–ù–∞–∂–º–∏ üì° –°–∏–≥–Ω–∞–ª",
            reply_markup=ReplyKeyboardMarkup([["üì° –°–∏–≥–Ω–∞–ª", "üîÑ –í–∞–ª—é—Ç–∞"]], resize_keyboard=True)
        )

    # ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
    elif text == "üì° –°–∏–≥–Ω–∞–ª":
        pair = context.user_data.get("pair", "EUR/USD")
        tf = context.user_data.get("tf", "M5")
        direction = random.choice(["BUY", "SELL"])
        emoji = "üü¢" if direction == "BUY" else "üî¥"
        arrow = "–≤–≤–µ—Ä—Ö" if direction == "BUY" else "–≤–Ω–∏–∑"

        # –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏
        duration = random.randint(1, 5)  # 1‚Äì5 –º–∏–Ω—É—Ç
        now = datetime.now()
        now_str = now.strftime("%H:%M:%S")
        end_time = (now + timedelta(minutes=duration)).strftime("%H:%M:%S")

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        await update.message.reply_text(
            f"üîî –°–∏–≥–Ω–∞–ª {pair} {tf}\n"
            f"{emoji} {direction} ({arrow})\n"
            f"‚è≥ –ó–∞–π—Ç–∏ –Ω–∞: {duration} –º–∏–Ω\n"
            f"üïí –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞: {now_str}\n"
            f"‚èπ –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É –¥–æ: {end_time}"
        )

        # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞
        await update.message.reply_text(
            "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É —Å–∏–≥–Ω–∞–ª—É:",
            reply_markup=ReplyKeyboardMarkup([["üì° –°–∏–≥–Ω–∞–ª", "üîÑ –í–∞–ª—é—Ç–∞"]], resize_keyboard=True)
        )

    # ‚úÖ –°–º–µ–Ω–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    elif text == "üîÑ –í–∞–ª—é—Ç–∞":
        keyboard = [[pair] for pair in PAIRS]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )

    # ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º.")


# üìå –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    if not TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")
        exit(1)

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

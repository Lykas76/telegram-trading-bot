import os
import random
import requests
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# === –£–°–¢–ê–ù–û–í–ö–ò ===
TELEGRAM_TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"
ALPHA_VANTAGE_KEY = os.getenv("ALPHA_VANTAGE_KEY")  # –∫–ª—é—á API Alpha Vantage

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
PAIRS = ["EUR/USD", "AUD/JPY", "AUD/USD", "EUR/GBP", "EUR/CAD"]
TIMEFRAMES = ["M1", "M5", "M15"]

# === –§–£–ù–ö–¶–ò–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[p] for p in PAIRS]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
    )

async def get_forex_data(pair: str, tf: str):
    if not ALPHA_VANTAGE_KEY:
        return None, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω API-–∫–ª—é—á"

    base, quote = pair.split("/")
    interval = {"M1": "1min", "M5": "5min", "M15": "15min"}.get(tf, "1min")

    url = (
        f"https://www.alphavantage.co/query"
        f"?function=FX_INTRADAY&from_symbol={base}&to_symbol={quote}"
        f"&interval={interval}&apikey={ALPHA_VANTAGE_KEY}&outputsize=compact"
    )

    try:
        r = requests.get(url, timeout=10)
        data = r.json()
    except Exception:
        return None, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"

    if "Time Series FX" not in data:
        if "Note" in data:
            return None, "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API (5 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω)"
        if "Error Message" in data:
            return None, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞"
        return None, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    prices = list(data[f"Time Series FX ({interval})"].values())
    if not prices:
        return None, "‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ"
    return prices, None


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞
    if text in PAIRS:
        context.user_data["pair"] = text
        keyboard = [[t] for t in TIMEFRAMES]
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞ {text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )
        return

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º
    if text in TIMEFRAMES:
        context.user_data["tf"] = text
        keyboard = [["üì° –°–∏–≥–Ω–∞–ª"], ["–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É"]]
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º {text}. –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–æ—Å–∏ —Å–∏–≥–Ω–∞–ª:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–∏–≥–Ω–∞–ª
    if text == "üì° –°–∏–≥–Ω–∞–ª":
        pair = context.user_data.get("pair", "EUR/USD")
        tf = context.user_data.get("tf", "M5")

        prices, error = await get_forex_data(pair, tf)

        if error:
            now = datetime.now().strftime("%H:%M:%S")
            await update.message.reply_text(
                f"üîî –°–∏–≥–Ω–∞–ª {pair} {tf}\n{error}\n"
                f"‚è≥ –ó–∞–π—Ç–∏ –Ω–∞: 2 –º–∏–Ω\nüìä –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: 0%\nüïí –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞: {now}"
            )
            return

        direction = random.choice(["BUY", "SELL"])
        emoji = "üü¢" if direction == "BUY" else "üî¥"
        arrow = "–≤–≤–µ—Ä—Ö" if direction == "BUY" else "–≤–Ω–∏–∑"

        now = datetime.now()
        enter_time = now.strftime("%H:%M:%S")
        exit_time = (now + timedelta(minutes=2)).strftime("%H:%M:%S")

        await update.message.reply_text(
            f"üîî –°–∏–≥–Ω–∞–ª {pair} {tf}\n"
            f"{emoji} {direction} ({arrow})\n"
            f"‚è≥ –ó–∞–π—Ç–∏ –Ω–∞: 2 –º–∏–Ω\n"
            f"üìä –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {random.randint(70, 95)}%\n"
            f"üïí –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞: {enter_time}\n"
            f"‚èπ –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É –¥–æ: {exit_time}"
        )
        return

    # –°–º–µ–Ω–∞ –≤–∞–ª—é—Ç—ã
    if text == "–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É":
        keyboard = [[p] for p in PAIRS]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )
        return


# === –ó–ê–ü–£–°–ö ===
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()


if __name__ == "__main__":
    main()

import os
import requests
import sqlite3
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
API_KEY = "8aefd7f6d24d4e99ba317872ce59e00c"

PAIRS = ["EUR/USD", "GBP/USD", "AUD/JPY", "EUR/CAD"]
TIMEFRAMES = ["M1", "M5", "M15"]

# --- RSI + MACD —É–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª ---
def get_smart_signal(pair: str, timeframe: str) -> dict:
    tf_map = {
        "M1": "1min",
        "M5": "5min",
        "M15": "15min"
    }
    interval = tf_map.get(timeframe, "5min")
    symbol = pair

    try:
        # RSI
        rsi_url = f"https://api.twelvedata.com/rsi?symbol={symbol}&interval={interval}&apikey={API_KEY}&outputsize=1"
        rsi = float(requests.get(rsi_url).json()["values"][0]["rsi"])

        # MACD
        macd_url = f"https://api.twelvedata.com/macd?symbol={symbol}&interval={interval}&apikey={API_KEY}&outputsize=1"
        macd_data = requests.get(macd_url).json()["values"][0]
        macd = float(macd_data["macd"])
        signal = float(macd_data["signal"])

        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
        if rsi < 30 and macd > signal:
            action = "üü¢ BUY (–≤–≤–µ—Ä—Ö)"
        elif rsi > 70 and macd < signal:
            action = "üî¥ SELL (–≤–Ω–∏–∑)"
        else:
            action = "‚ö™Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞"

        return {
            "action": action,
            "rsi": rsi,
            "macd": macd,
            "macd_signal": signal
        }

    except Exception as e:
        return {"action": f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", "rsi": 0, "macd": 0, "macd_signal": 0}

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É ---
def save_signal_to_db(pair, tf, rsi, macd, macd_signal, action):
    conn = sqlite3.connect("signals.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS signals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        pair TEXT,
        timeframe TEXT,
        rsi REAL,
        macd REAL,
        signal REAL,
        action TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )''')
    c.execute("INSERT INTO signals (pair, timeframe, rsi, macd, signal, action) VALUES (?, ?, ?, ?, ?, ?)",
              (pair, tf, rsi, macd, macd_signal, action))
    conn.commit()
    conn.close()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [[pair] for pair in PAIRS]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    print(f"üë§ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_chat.id}")  # ‚Üê –í—ã–≤–æ–¥ chat_id

    if text in PAIRS:
        context.user_data["pair"] = text
        keyboard = [[tf] for tf in TIMEFRAMES]
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return

    if text in TIMEFRAMES:
        context.user_data["tf"] = text
        keyboard = [["üì° –°–∏–≥–Ω–∞–ª", "üìä –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª (RSI+MACD)"], ["üîÑ –í–∞–ª—é—Ç–∞"]]
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º: {text}",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return

    if text == "üìä –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª (RSI+MACD)":
        pair = context.user_data.get("pair")
        tf = context.user_data.get("tf")
        if pair and tf:
            result = get_smart_signal(pair, tf)
            save_signal_to_db(pair, tf, result["rsi"], result["macd"], result["macd_signal"], result["action"])
            await update.message.reply_text(
                f"ü§ñ –£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª {pair} {tf}\n{result['action']}\nüìä RSI: {result['rsi']:.1f}, MACD: {result['macd']:.4f}\n‚è≥ –í—Ä–µ–º—è: 1‚Äì3 –º–∏–Ω"
            )
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º.")
        return

    if text == "üì° –°–∏–≥–Ω–∞–ª":
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
        return

    if text == "üîÑ –í–∞–ª—é—Ç–∞":
        context.user_data.clear()
        keyboard = [[pair] for pair in PAIRS]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∑–∞–Ω–æ–≤–æ:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return

    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()

